@page "/gerente"
@inject NavigationManager Nav
@inject HttpClient Http



<AuthorizeView Roles="Admin, Aluno">

    <Authorized Context="Auth">

        <GerenteComponente Grupo="@Grupo"
                           GrupoOperadorGerente="Grupo Gerente"
                           TextoBotao1="@textoBotao1"
                           Disabled="@disabled"
                           Display="@display"
                           OnAction2="@(()=> OnHistorico())"
                           OnAction3="@(()=> OnIndicadores())"
                           OnAction1="OnEditarSalvar">
            <Icon>
                <i class="fas fa-user-tie" style="font-size:30px" ;></i>
            </Icon>
            <ChildContent>
                <h6 class="text-center" style="color:mediumseagreen">@MensagemSucesso</h6>
                <h6 class="text-center" style="color:tomato">@MensagemErro</h6>
            </ChildContent>
        </GerenteComponente>


        @if (IsBusy == true)
        {
            <div style="width:100%; text-align:center; margin:20px 0">
                <div class="spinner-border" style="width: 2rem; height: 2rem; color:#4a8fa0;" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
                <p>carregando. . .</p>
            </div>
        }

        <Modal @ref="modalHistorico"
               P_TextoTitulo=""
               TextoBotao="Indicadores"
               OnAction="@OnIndicadores">
            <Historicos />
        </Modal>

        <Modal @ref="modalIndicadores"
               P_TextoTitulo=""
               TextoBotao="Historico"
               OnAction="@OnHistorico">
            <IndicadoresComponent />
        </Modal>

    </Authorized>

    <NotAuthorized Context="Auth">
        <Index />
    </NotAuthorized>
</AuthorizeView>

@code   {
    public Grupo Grupo { get; set; } = new Grupo();
    public string MensagemErro { get; set; }
    public string MensagemSucesso { get; set; }
    public bool IsDisabled { get; set; }
    public bool IsBusy { get; set; }
    protected Modal modalHistorico;
    protected Modal modalIndicadores;

    private string textoBotao1 = "Editar";
    private bool disabled = true;
    private string display = "";

    int fase;

    protected override async Task OnInitializedAsync()
    {
        Grupo = await Mock.ListaGrupo(3);

        var respose = await Http.GetJsonAsync<GenericResult<JogoVarejo_Server.Shared.Models.Controle>>("api/v1/controle/");
        if (respose.Sucesso)
        {
            fase = respose.obj.Fase;
        }
    }

    protected void OnEditarSalvar()
    {
        Console.WriteLine(" => OnEditarSalvar");

        MensagemSucesso = "";
        MensagemErro = "";

        if (fase < 1)
        {
            MensagemErro = "O Jogo ainda não começou! Aguarde o indicação do professor.";
            return;
        }

        if (fase > 1)
        {
            MensagemErro = "Você não pode mais editar esses campos!";
            return;
        }

        if (fase == 1 && textoBotao1.Contains("Editar"))
        {
            textoBotao1 = "Salvar";
            disabled = false;
            display = "none";
            StateHasChanged();
            return;
        }

        if (fase == 1 && textoBotao1.Contains("Salvar"))
        {
            OnSalvar();
            textoBotao1 = "Editar";
            disabled = true;
            display = "";
            StateHasChanged();
            return;
        }

        Console.WriteLine(" => Salvar");

        MensagemSucesso = "Os campos foram salvos com sucesso!";
    }


    protected async Task OnHistorico()
    {
        Console.WriteLine(" => OnHistorico");
        await Task.Run(() => modalIndicadores.Ocultar());

        await Task.Run(() => modalHistorico.Exibir());
        MensagemSucesso = "";
    }

    protected async Task OnIndicadores()
    {
        await Task.Run(() => modalHistorico.Ocultar());

        await Task.Run(() => modalIndicadores.Exibir());
        MensagemSucesso = "";
    }

    protected async Task BtnAlertAceitar()
    {
        await Task.Run(() => modalHistorico.Ocultar());
        await Task.Run(() => modalIndicadores.Ocultar());
    }

    protected async Task AbrirIndicadoares()
    {
        Nav.NavigateTo("/indicadores");
    }


    protected async Task OnSalvar()
    {
        MensagemSucesso = "Salvo com sucesso!";
    }
}
