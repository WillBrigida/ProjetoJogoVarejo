@page "/registro"
@inject IAuthService AuthService
@inject NavigationManager Nav

<AuthorizeView Roles="Admin, Professor">
    <Authorized Context="Auth">
        <div class="text-center" id="registro">
            <h3 class="display-4">Cadastro</h3>
            <br />
        </div>

        <h6 class="text-center" style="color:mediumseagreen;">@MensagemSucesso</h6>
        <h6 class="text-center" style="color:tomato">@MensagemErro</h6>
        <div class="card" id="card-registro">
            <div class="card-body">
                <h3 class="text-center">Novo Usuário / Grupo</h3>
                <EditForm Model="@Usuario" OnValidSubmit="Registrar">

                    <div class="form-group">
                        <label form="categoria">Tipo de Usuário: *</label>
                        <select @onchange="@SelectTipo" class="form-control">
                            @for (int i = 0; i < TipoUsuario.Length; i++)
                            {
                                <option value="@TipoUsuario[i]">
                                    @TipoUsuario[i]
                                </option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="grupo">Nome: *</label>
                        <InputText Id="nome" class="form-control" @bind-Value="Usuario.Nome" />
                        <ValidationMessage For="@(() => Usuario.Nome)" />
                    </div>

                    <div class="form-group">
                        <label for="grupo">Login: *</label>
                        <InputText Id="nome" class="form-control" @bind-Value="Usuario.Login" />
                        <ValidationMessage For="@(() => Usuario.Login)" />
                    </div>

                    <div class="form-group">
                        <label for="grupo">Senha: *</label>
                        <InputText Id="nome" class="form-control" @bind-Value="Usuario.Senha" />
                        <ValidationMessage For="@(() => Usuario.Senha)" />
                    </div>

                    <div class="form-group">
                        <label form="categoria">Grupo: </label>
                        <select @onchange="@SelectGrupo" class="form-control" disabled="@IsDisabled">
                            @for (int i = 0; i < Grupos.Length; i++)
                            {
                                <option value="@Grupos[i]">
                                    @Grupos[i]
                                </option>
                            }
                        </select>
                    </div>

                    <button type="submit" class="btn btn-primary">Salvar</button>
                </EditForm>
            </div>
        </div>
    </Authorized>

    <NotAuthorized Context="Auth">
        <Index />
    </NotAuthorized>
</AuthorizeView>




@code
        {
    public Usuario Usuario = new Usuario();
    public string[] TipoUsuario { get; set; } = new string[] { "-Selecione-", "Professor", "Aluno" };
    public string[] Grupos { get; set; } = new string[] { "-Selecione-", "1", "2", "3", "4", "5", "6", "7", "8" };
    public string MensagemErro { get; set; }
    public string MensagemSucesso { get; set; }
    public bool IsDisabled { get; set; }

    protected async Task Registrar()
    {
        MensagemErro = "";
        MensagemSucesso = "";

        if (string.IsNullOrEmpty(Usuario.Nome) || string.IsNullOrEmpty(Usuario.Login) || string.IsNullOrEmpty(Usuario.Senha))
        {
            MensagemErro = "* Campo obrigatório!";
            return;
        }

        var result = await AuthService.Register(Usuario);

        if (result.Sucesso)
        {
            MensagemSucesso = $"{Usuario.Nome} cadastrado com sucesso!";
            return;
        }

        MensagemErro = result.Erro;
    }

    protected void SelectGrupo(ChangeEventArgs e)
    {
        IsDisabled = false;
        MensagemErro = "";

        if (Usuario.TipoUsuarioId == 0)
        {
            MensagemErro = "Selecione primeiro o tipo de usuário";
            return;
        }

        if (e.Value.ToString().Contains("-Selecione-"))
        {
            MensagemErro = "Selecione um Tipo";
            return;
        }

        Usuario.GrupoUsuarioId = int.Parse(e.Value.ToString());
        StateHasChanged();
    }

    protected void SelectTipo(ChangeEventArgs e)
    {
        IsDisabled = false;
        MensagemErro = "";


        if (e.Value.ToString().Contains("-Selecione-"))
        {
            MensagemErro = "Selecione um Tipo";
            return;
        }

        if (e.Value.ToString().Contains("Professor"))
        {
            Usuario.TipoUsuarioId = 1;
            Usuario.GrupoUsuarioId = 0;
            IsDisabled = true;
        }
        else
            Usuario.TipoUsuarioId = 2;
    }
}

