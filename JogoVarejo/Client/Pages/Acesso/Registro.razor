@page "/registro"
@inject IAuthService AuthService
@inject NavigationManager Nav


<AuthorizeView Roles="Admin, Professor">
    <Authorized Context="Auth">
        @*<NavMenuConfiguracao />*@

        <div class="text-center" id="registro">
            <h1 class="display-4">Cadastro</h1>
            <br />
        </div>

        <h6 class="text-center" style="color:mediumseagreen">@MensagemSucesso</h6>
        <h6 class="text-center" style="color:tomato">@MensagemErro</h6>

        <div class="card cor-site" id="card-registro">
            <div class="card-body">
                <h3 class="text-center">Novo Usuário / Grupo</h3>
                <EditForm Model="@Usuario" OnValidSubmit="Registrar">

                    <div class="form-row">
                        <div class="form-group col">
                            <label for="grupo">Nome: *</label>
                            <InputText Id="nome" class="form-control" @bind-Value="Usuario.Nome" />
                            <ValidationMessage For="@(() => Usuario.Nome)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-6">
                            <label form="categoria">Tipo de Usuário: *</label>
                            <select @onchange="@SelectTipo" class="form-control">
                                @for (int i = 0; i < TipoUsuario.Length; i++)
                                {
                                    <option value="@TipoUsuario[i]">
                                        @TipoUsuario[i]
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="form-group col-6">
                            <label form="categoria">Grupo: </label>
                            <select @onchange="@SelectGrupo" class="form-control" disabled="@IsDisabled">
                                @for (int i = 0; i < Grupos.Length; i++)
                                {
                                    <option value="@Grupos[i]">
                                        @Grupos[i]
                                    </option>
                                }
                            </select>
                        </div>
                    </div>


                    <div class="form-row">
                        <div class="form-group col-6">
                            <label for="grupo">Login: *</label>
                            <InputText Id="nome" class="form-control" @bind-Value="Usuario.Login" />
                            <ValidationMessage For="@(() => Usuario.Login)" />
                        </div>
                        <div class="form-group col-6">
                            <label for="grupo">Senha: *</label>
                            <InputText Id="nome" class="form-control" @bind-Value="Usuario.Senha" />
                            <ValidationMessage For="@(() => Usuario.Senha)" />
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary">Salvar</button>

                </EditForm>
            </div>
        </div>

        @if (IsBusy == true)
        {
            <div style="width:100%; text-align:center; margin:20px 0">
                <div class="spinner-border" style="width: 2rem; height: 2rem; color:#4a8fa0;" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
                <p>carregando. . .</p>
            </div>
        }
    </Authorized>

    <NotAuthorized>
        <Index />
    </NotAuthorized>
</AuthorizeView>




@code
        {
    public ApplicationUser Usuario = new ApplicationUser();
    public string[] TipoUsuario { get; set; } = new string[] { "-Selecione-", "Professor", "Aluno" };
    public string[] Grupos { get; set; } = new string[] { "-Selecione-", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" };
    public string MensagemErro { get; set; }
    public string MensagemSucesso { get; set; }
    public bool IsDisabled { get; set; }
    public bool IsBusy { get; set; }


    protected async Task Registrar()
    {
        MensagemErro = "";
        MensagemSucesso = "";

        if (string.IsNullOrEmpty(Usuario.Nome) || string.IsNullOrEmpty(Usuario.Login) || string.IsNullOrEmpty(Usuario.Senha))
        {
            MensagemErro = "* Campo obrigatório!";
            return;
        }

        if (Usuario.TipoUsuarioId == 2 && Usuario.GrupoUsuarioId == 0)
        {
            MensagemErro = "Selecione um Grupo";
            return;
        }

        IsBusy = true;

        var result = await AuthService.Register(Usuario);

        if (result.Sucesso)
        {
            MensagemSucesso = $"{Usuario.Nome} cadastrado com sucesso!";
            IsBusy = false;
            return;
        }

        MensagemErro = result.Mensagem;
        IsBusy = false;
    }

    protected void SelectGrupo(ChangeEventArgs e)
    {
        IsDisabled = false;
        MensagemErro = "";

        if (Usuario.TipoUsuarioId == 0)
        {
            MensagemErro = "Selecione primeiro o tipo de usuário";
            return;
        }

        if (e.Value.ToString().Contains("-Selecione-"))
        {
            MensagemErro = "Selecione um Grupo";
            return;
        }


        Usuario.GrupoUsuarioId = int.Parse(e.Value.ToString());
        Usuario.Login = $"grupo{Usuario.GrupoUsuarioId}";
        Usuario.Senha = $"grupo{Usuario.GrupoUsuarioId}";
        Usuario.Nome = $"Grupo {Usuario.GrupoUsuarioId}";
        StateHasChanged();
    }

    protected void SelectTipo(ChangeEventArgs e)
    {
        IsDisabled = false;
        MensagemErro = "";


        if (e.Value.ToString().Contains("-Selecione-"))
        {
            MensagemErro = "Selecione um Tipo";
            return;
        }

        if (e.Value.ToString().Contains("Professor"))
        {
            Usuario.TipoUsuarioId = 1;
            Usuario.GrupoUsuarioId = 0;
            IsDisabled = true;
        }
        else
            Usuario.TipoUsuarioId = 2;
    }

}


<style>

    #registro {
        margin: 0px 0px 0px 0px;
    }


    #card-registro {
        width: 50%;
        margin: 20px auto 60px;
        padding: 0px 40px;
    }

    h3, label {
        color: #d7d7d7;
    }




</style>